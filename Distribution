package itp120mod7;

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.text.DecimalFormat;

public class Distribution {

	public static void main(String[] args) {
		int[] num = readFiles();
		printNumbers(num);
		average(num);
	}

	public static int[] readFiles() {

		int[] list = new int[11];

		Frame f = new Frame();
		// decide from where to read the file
		FileDialog foBox = new FileDialog(f, "Reading text file", FileDialog.LOAD);
		foBox.setVisible(true);
		// get the absolute path to the file
		String foName = foBox.getFile();
		String dirPath = foBox.getDirectory();

		// create a file instance for the absolute path
		File inFile = new File(dirPath + foName);
		BufferedReader in = null;
		try
		{
			// create a BufferedReader to use to read in the file
			in = new BufferedReader(new FileReader(inFile));

			// read in the first entire line from the file
			String line = in.readLine();

			while (line != null)
			{
				StringTokenizer t = new StringTokenizer(line, " ");
				while (t.hasMoreTokens())
				{
					int val = Integer.parseInt(t.nextToken().trim());
					list[val]++;
				}

				// read in the next line
				line = in.readLine();
			}

		} 
		catch (IOException io) 
		{
			System.out.println("An IO Exception occurred");
			io.printStackTrace();
		} 
		
		finally // finally always runs no matter what so close the file here!
		{
			// close the file.

			try 
			{
				in.close();
			} 
			catch (Exception e) {} // note the {} - means "do nothing"
		}

		return list;

	}

	public static void printNumbers(int[] values) {
		System.out.println("The following is the distribution of values: ");
		for (int i = 1; i < values.length; i++) {
			System.out.println(i + "-" + values[i]);

		}
	}

	public static void average(int[] values) {
		DecimalFormat nf = new DecimalFormat(".##");
		int total = 0;
		double average = 0.0;
		int distribution = 0;
		
		for (int i = 1; i < values.length; i++) {
			total = total + i * values[i];
			distribution = distribution + values[i];
			average = ((double) total) / distribution;
		}

		System.out.println("The average value was " + nf.format(average));

		
	}

