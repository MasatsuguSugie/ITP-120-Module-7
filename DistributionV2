package itp120mod7;

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.Scanner;
import java.awt.*;
import java.util.*;

public class DistributionV2 {

	public static void main(String[] args) {
		// create an AL to read data into
		ArrayList<Integer> numList = new ArrayList<Integer>();
		// read information into this AL
		numList = readText();

		calcPrintDistribution(numList);
		calcPrintAverage(numList);
	}

	public static ArrayList<Integer> readText() {
		// create the ArrayList
		ArrayList<Integer> numbersList = new ArrayList<Integer>();

		Frame f = new Frame();
		// decide from where to read the file
		FileDialog foBox = new FileDialog(f, "Reading Text File",
				FileDialog.LOAD);
		foBox.setVisible(true);

		// get the absolute path to the file
		String foName = foBox.getFile();
		String dirPath = foBox.getDirectory();

		// create a file instance for the absolute path
		File inFile = new File(dirPath + foName);
		BufferedReader in = null;
		try {
			// create a BufferedReader to use to read in the file
			in = new BufferedReader(new FileReader(inFile));

			// read in the first entire line from the file
			String line = in.readLine();

			// continue until the line is null (ie you are at the end of the
			// file)

			while (line != null) {

				// create a StringTokenizer instance that will break the line
				// apart at each " "
				StringTokenizer t = new StringTokenizer(line, " ");

				// need to convert the numbers from txt file to data type int
				// and also need to trim off any spaces

				while (t.hasMoreTokens()) {
					int num = Integer.parseInt(t.nextToken().trim());
					// add the nums to the AL
					numbersList.add(num);
				}

				// read in next line
				line = in.readLine();
			}
		}

		// catch any IOException that occurs
		catch (IOException io) {
			System.out.println("An IO Exception occurred");
			io.printStackTrace();
		} finally // finally always runs no matter what so close the file here!
		{
			// close the file. Java is neurotic - it worried
			// "but what if it is already closed?" so needs another try/catch
			try {
				in.close();
			} catch (Exception e) {
			} // note the {} - means "do nothing". I wanted it closed anyway.
		}
		return numbersList;

	}

	public static void calcPrintDistribution(ArrayList<Integer> nums) {
		int[] dist = new int[10];
		for (int i = 0; i < nums.size(); i++) {
			if (nums.get(i) == 1) {
				dist[0]++;
			} else if (nums.get(i) == 2) {
				dist[1]++;
			} else if (nums.get(i) == 3) {
				dist[2]++;
			} else if (nums.get(i) == 4) {
				dist[3]++;
			} else if (nums.get(i) == 5) {
				dist[4]++;
			} else if (nums.get(i) == 6) {
				dist[5]++;
			} else if (nums.get(i) == 7) {
				dist[6]++;
			} else if (nums.get(i) == 8) {
				dist[7]++;
			} else if (nums.get(i) == 9) {
				dist[8]++;
			} else if (nums.get(i) == 10) {
				dist[9]++;
			}
		}

		System.out.println("The following is a distribution of values: \n");
		for (int i = 0; i < dist.length; i++)
			System.out.println((i + 1) + " - " + dist[i]);
	}

	public static void calcPrintAverage(ArrayList<Integer> nums) {
		DecimalFormat df = new DecimalFormat("#.00");
		double total = 0;
		double average = 0;

		for (int i = 0; i < nums.size(); i++) {
			total += nums.get(i);
		}
		average = total / nums.size();

		System.out.println("\nThe average value is: " + df.format(average));
	}

}
